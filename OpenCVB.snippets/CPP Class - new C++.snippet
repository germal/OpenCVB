<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>CPP_Class - new C++</Title>
        </Header>
        <Snippet>
            <Code Language="VB">
                <![CDATA[
Imports cv = OpenCvSharp
Imports System.Runtime.InteropServices

Module Anyname_CPP_Module
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_Open() As IntPtr
    End Function
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Sub Anyname_Close(cPtr As IntPtr)
    End Sub
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_Run(cPtr As IntPtr, rgbPtr As IntPtr, rows As Int32, cols As Int32, channels As Int32) As IntPtr
    End Function
End Module

'//// Cut and paste this code to a module in the "CPP_Classes" project for the C++ interface.
'//#include <cstdlib>
'//#include <cstdio>
'//#include <iostream>
'//#include <algorithm>
'//#include <opencv2/core.hpp>
'//#include <opencv2/imgproc.hpp>
'//#include <opencv2/highgui.hpp>

'//using namespace std;
'//using namespace cv;
'//class anyname
'//{
'//private:
'//public:
'//    Mat src, dst;
'//    anyname(){}
'//    void Run() {
'//        dst = src.clone();
'//    }
'//};

'//extern "C" __declspec(dllexport)
'//anyname *Anyname_Open() {
'//    anyname *cPtr = new anyname();
'//    return cPtr;
'//}

'//extern "C" __declspec(dllexport)
'//void Anyname_Close(anyname *cPtr)
'//{
'//    delete cPtr;
'//}

'//extern "C" __declspec(dllexport)
'//int *Anyname_Run(anyname *cPtr, int *rgbPtr, int rows, int cols, int channels)
'//{
'//		cPtr->src = Mat(rows, cols, (channels == 3) ? CV_8UC3 : CV_8UC1, rgbPtr);
'//		cPtr->Run();
'//		return (int *) cPtr->dst.data; // return this C++ allocated data to managed code
'//}

Public Class AnyName_CPP
    Inherits VBparent
    Dim cPtr As IntPtr
    Public Sub New()
        initParent()
        
        cPtr = Anyname_Open()
        task.desc = "description"
	  End Sub
    Public Sub Run()
        If task.intermediateReview = caller Then ocvb.intermediateObject = Me
        
        Dim input = src
        If input.Channels <> 1 Then input = input.CvtColor(cv.ColorConversionCodes.BGR2GRAY)

        Dim srcData(input.Total * input.ElemSize) As Byte
        Marshal.Copy(input.Data, srcData, 0, srcData.Length - 1)
        Dim handleSrc = GCHandle.Alloc(srcData, GCHandleType.Pinned)
        Dim imagePtr = Anyname_Run(cPtr, handleSrc.AddrOfPinnedObject(), input.Rows, input.Cols, input.Channels)
        handleSrc.Free()

        If imagePtr <> 0 Then
            Dim dstData(input.Total * input.ElemSize - 1) As Byte
            Marshal.Copy(imagePtr, dstData, 0, dstData.Length)
            dst1 = New cv.Mat(input.Rows, input.Cols, If(input.Channels = 3, cv.MatType.CV_8UC3, cv.MatType.CV_8UC1), dstData)
        End If
    End Sub
    Public Sub Close() 
        Anyname_Close(cPtr)
    End Sub
End Class
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>